@page "/"
@inject GlobalVariables GlobalVars
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="main-content">
    <h3>Welcome to @GlobalVars.Name!</h3>
    <p>Your ip is @GlobalVars.ip</p>
    <p>Last time refreshed: @GlobalVars.last_time</p>

    <!-- Query Section -->
    <div class="form-group">
        <label for="query">Enter Query:</label>
        <input id="query" type="text" @bind="query" @bind:event="oninput" placeholder="Enter Query..." />
    </div>

    <div>
        <p>@outputMessage</p>
    </div>

    <!-- URL Section -->
    <div class="form-group">
        <label for="url">Or enter a URL instead:</label>
        <input id="url" type="url" @bind="url" @bind:event="oninput" placeholder="Enter URL..." />
    </div>

    <button type="button" class="submit-button" @onclick="UrlLook">
        Submit
    </button>
</div>

<div class="parent">
    <div class="json-container">
        <h3>JSON Data Viewer</h3>
        <pre>@currentJson</pre>
        <pre>@displayedJson</pre>



        <div class="json-buttons">
            <button @onclick="LoadJson">Load</button>
            <button @onclick="SaveJson">Save</button>
            <button @onclick="DeleteJson">Delete</button>
            <button @onclick="CreateNewJson">Create New</button>
        </div>
        <textarea @bind="jsonContent" class="json-editor" rows="10"></textarea>
    </div>
</div>





@code {







    //" https://www.w3schools.com/cs/index.php"

    private string? url { get; set; } 
    private string query { get; set; } = string.Empty;
    private string outputMessage { get; set; } = string.Empty;
    private string title { get; set; } = string.Empty;
    private string divContent { get; set; } = string.Empty;
    private string jsonContent { get; set; } = string.Empty;
    private string displayedJson { get; set; } = string.Empty;

    private string currentJson { get; set; } = string.Empty;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        GlobalVars.last_time = DateTime.Now.ToString();

    }

    private async Task UrlLook()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?"); // Confirm

        var ip_address = GlobalVars.ip;
        var last_loaded = GlobalVars.last_time;
        var query_saved = query;
        var url_saved = url;

        if (confirmed)
        {
            outputMessage = "You entered: " + query;
            Search();
            var jsondata = new
            {
                General_Data = new[] {
                    "IP: "+ip_address,
                    "Last Loaded: "+last_loaded
                },

                Web_Data = new[] {
                    "Url: "+url,
                    "Query: "+query,
                    "Title: "+title,
                    "All div tags: " + divContent,
                    "Time of scrape: "+DateTime.Now.ToString(),
                    "Amount of divs: "+divContent.Count(x => x == '<'),
                    "Amount of p tags: "+divContent.Count(x => x == 'p')

                }

            }; 

            string jsonString = JsonConvert.SerializeObject(jsondata, Formatting.Indented);
            //clearing all old text
            File.WriteAllText("data.json", jsonString);
            string filePath = Path.Combine(Directory.GetCurrentDirectory(), "data.json");
            using (var stream = new FileStream(filePath, FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite))
            using (var writer = new StreamWriter(stream))
            {

                writer.Write(jsonString);

            }
        }
        StateHasChanged();
    }

}

@code{



    private string filePath { get; set; } = Path.Combine(Directory.GetCurrentDirectory(), "data.json");
   
    private void Search()
    {

        var web = new HtmlWeb();
        try{
            var doc = web.Load(url); 
            title = doc.DocumentNode.SelectSingleNode("//title").InnerText;
            var divs = doc.DocumentNode.SelectNodes("//div");
            divContent = string.Join("\n", divs.Select(p => p.InnerText));

        }
        catch (Exception e)
        {


        }

        if (query == "")
        {
            query = "No query";
        }

        if (url == "")
        {
            url = "No url";
        }

        if(title == "")
        {
            title = "No title";
        }

        if(divContent == "")
        {
            divContent = "No div content";

        }


    }

    private async Task LoadJson()
    {
        if (File.Exists(filePath))
        {
            jsonContent = await File.ReadAllTextAsync(filePath);
            displayedJson = jsonContent;

           
        }
        else
        {
            jsonContent = "{ \"error\": \"No file found.\" }";
        }
    }

    private async Task SaveJson()
    {
        await File.WriteAllTextAsync(filePath, jsonContent);
    }

    private Task DeleteJson()
    {
        jsonContent = "{}";
        displayedJson = "{}";
        return Task.CompletedTask;
    }

    private Task CreateNewJson()
    {
        jsonContent = "{\n    \"key\": \"value\"\n}";
        displayedJson = jsonContent;
        return Task.CompletedTask;
    }
    
}

